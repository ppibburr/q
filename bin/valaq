#!/usr/bin/env ruby


require 'q'
require "q/builder/compilers/vala.rb"

Q::Ast.compiler_type = Q::ValaSourceGenerator

require 'optparse'
ARGV << '-h' if ARGV.empty? or ARGV[0] =~ /^\-/

options = {:valac=>'valac', :verbose => false, :compile => true}
optparse = OptionParser.new do |opts|
  opts.banner = "Q Compiler\n\nUsage: valaq file [options] [-- [valac_options]]"
  opts.separator ""
  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
  
  opts.on("--valac-command [COMMAND]") do |v|
    options[:valac_command] = v
  end
  
  opts.on("--introspection NAMESPACE-VERSION", "generate a gir: <NAMESPACE>-<VERSION>.gir") do |v|
    options[:gir] = v
  end
  
  opts.on("--install-gir", "installs data generated in the ./q-gir directory") do
    options[:install_gir] = true
  end
  
  opts.on("--vapi-dir LOCATION", "specify location to install .vapi files. only valid with `--install-gir`") do |v|
    options[:vapi_dir] = v
  end  
  
  opts.on("--gir-dir LOCATION", "specify location to install .gir files. only valid with `--install-gir`") do |v|
    options[:gir_dir] = v
  end  
  
  opts.on("--lib-dir LOCATION", "specify location to install .so files. only valid with `--install-gir`") do |v|
    options[:lib_dir] = v
  end
  
  opts.on("--typelib-dir LOCATION", "specify location to install .typelib files. only valid with `--install-gir`") do |v|
    options[:typelib_dir] = v
  end    
  
  opts.on("--include-dir LOCATION", "specify location to install .h files. only valid with `--install-gir`") do |v|
    options[:include_dir] = v
  end  
  
  opts.on("--pconfig-dir LOCATION", "specify location to install .pc files. only valid with `--install-gir`") do |v|
    options[:pc_dir] = v
  end            
  
  opts.on("--[no-]compile", "compiles") do |v|
    options[:compile] = v
  end  
  
  opts.on("--[no-]remove-generated", "Removes generated .vala files") do |v|
    options[:remove] = v
  end
  
  opts.on("-V", "--valac VALAC", "specify the valac command") do |v|
    options[:valac] = v
  end
  
  opts.on("-e", "--exec", "execute after compiling") do
    options[:exec] = true
  end   
  
  opts.on( "--version", "show the version") do
    options[:version] = true
  end 
  
  opts.on("-h", "--help", "Displays this summary" ) do
    puts opts
    exit(1)
  end
  
  opts.separator ""
  opts.separator "For valac options run 'valac --help'." 
  opts.separator ""   
end

arguments = ARGV.dup
secondary_arguments = []

first_run = true
errors = false
while errors || first_run
  errors = false
  first_run = false
  begin
    optparse.order!(arguments) do |unrecognized_option|
      secondary_arguments.push(unrecognized_option)
    end
  rescue OptionParser::InvalidOption => e
    errors = true
    e.args.each { |arg| secondary_arguments.push(arg) }
    arguments.delete(e.args)
  end
end

primary_arguments = ARGV.dup
secondary_arguments.each do |cuke_arg|
  primary_arguments.delete(cuke_arg)
end

optparse.parse(primary_arguments)

if !options.has_key?(:remove)
  options[:remove] = true
end

if options[:verbose]
  secondary_arguments << "-v"
end

VALAC_COMMAND = options[:valac_command] || "valac"
VALA_VERSION  = `#{VALAC_COMMAND} --version`.strip.split(" ")[1].split(".")[0..1].join(".")

BUILD_PATH         = options[:build_dir] || "./q-gir"

BUILD_TYPELIB_PATH = "#{BUILD_PATH}/usr/lib/girepository-1.0/"
BUILD_GIR_PATH     = "#{BUILD_PATH}/usr/share/gir-1.0/"
BUILD_LIB_PATH     = "#{BUILD_PATH}/usr/lib/"
BUILD_INCLUDE_PATH = "#{BUILD_PATH}/usr/include/"
BUILD_VAPI_PATH    = "#{BUILD_PATH}/usr/share/vala-#{VALA_VERSION}/vapi/"
BUILD_PC_PATH      = "#{BUILD_PATH}/usr/share/pkgconfig/"

TARGET_TYPELIB_PATH = options[:typelib_dir] || "/usr/lib/girepository-1.0/"
TARGET_GIR_PATH     = options[:gir_dir]     || "/usr/share/gir-1.0/"
TARGET_LIB_PATH     = options[:lib_dir]     || "/usr/lib/"
TARGET_INCLUDE_PATH = options[:include_dir] || "/usr/include/"
TARGET_VAPI_PATH    = options[:vapi_dir]    || "/usr/share/vala-#{VALA_VERSION}/vapi/"
TARGET_PC_PATH      = options[:pc_dir]      || "/usr/share/pkgconfig/"

def vala_file f
  base = File.basename(f)
  dir  = File.dirname(f)
  File.join(dir,"#{base.gsub(/\.q$/,".vala")}")
end

COMMENTS = {}

def perform f, reqs=[]
  reqs << f unless reqs.index f

  code = open(f).read
  ast = Q.build(code, f)

  ast.parented nil
  COMMENTS[f] = Q::COMMENTS.dup;
  Q::COMMENTS.clear
  ast.requires.each do |req|
    if req.ok?
    perform req.path, reqs  
    else
      puts "RequireError: #{req.source} - #{req.line}, no such file: #{req.path}"
      exit 1
  end
  end  

  Q::COMMENTS.clear
  Q::COMMENTS.push *COMMENTS[f]
  File.open(vala_file(f), "w") do |f| f.puts Q::ValaSourceGenerator.new(ast).compile end
end

f = File.expand_path(secondary_arguments.shift)
REL_DIR = File.dirname(f)
perform f, reqs = []

if options[:gir]
  secondary_arguments.insert(0, "--gir=#{options[:gir]}.gir --header=#{z=options[:gir].split("-")[0].downcase}.h --library #{options[:gir]} -o lib#{z}.so")
end
p secondary_arguments
if options[:compile]
  puts cmd="valac #{vs=reqs.uniq.map do |f| vala_file(f) end.join(" ")} #{secondary_arguments.join(" ")}#{options[:gir] ? " -X -fPIC -X -shared" : ""}".strip
  exit(1) unless system(cmd)
  system "rm #{vs}" if options[:remove]
 
  if options[:gir]
    [BUILD_PATH, BUILD_GIR_PATH, BUILD_TYPELIB_PATH, BUILD_LIB_PATH, BUILD_VAPI_PATH, BUILD_INCLUDE_PATH, BUILD_PC_PATH].each do |pth|
      system "mkdir -p #{pth}"
    end
    
    puts cmd = "g-ir-compiler --shared-library=#{q=options[:gir].split("-")[0].downcase} #{options[:gir]}.gir -o #{options[:gir]}.typelib" 
    exit(1) unless system(cmd)
    system "mv #{options[:gir]}.typelib #{BUILD_TYPELIB_PATH}/"
    system "mv #{options[:gir]}.gir #{BUILD_GIR_PATH}/"
    system "mv ./lib#{q}.so #{BUILD_LIB_PATH}/"
    system "mv #{options[:gir]}.vapi #{BUILD_VAPI_PATH}/"
    system "mv #{q}.h #{BUILD_INCLUDE_PATH}/"    
    
    pc = <<EOC
prefix=#{BUILD_PATH}
exec_prefix=${prefix}
includedir=#{BUILD_INCLUDE_PATH}
libdir=#{BUILD_LIB_PATH}

Name: #{q}
Description: The #{q} library
Version: #{options[:gir].split("-").last}
Cflags: -I${includedir}
Libs: -L${libdir} -l#{q}    
EOC

    File.open(BUILD_PC_PATH+"/#{options[:gir]}.pc", "w") do |f| f.puts pc end
    
    puts "GIR creation completed.\nThe information files exist at: #{BUILD_PATH}"
    
    
    File.open("test_#{q}_gir.rb", "w") do |f|
      f.puts <<-EOC
begin
  require 'gir_ffi'
rescue
  require 'rubygems'
  require 'gir_ffi'
end

GirFFI.setup '#{options[:gir].split("-")[0]}', '#{options[:gir].split("-")[1]}'
p #{options[:gir].split("-")[0]}
      EOC
    end 
  end
  if options[:exec]
    system "./#{File.basename(f.gsub(/\.q$/,''))}"
  end
end

if options[:install_gir]
  puts cmd = "mv #{BUILD_GIR_PATH}/*.gir #{TARGET_GIR_PATH}/"
  system cmd
  
  puts cmd = "mv #{BUILD_TYPELIB_PATH}/*.typelib #{TARGET_TYPELIB_PATH}/"
  system cmd
  
  puts cmd = "mv #{BUILD_VAPI_PATH}/*.vapi #{TARGET_VAPI_PATH}/"
  system cmd
  
  puts cmd = "mv #{BUILD_LIB_PATH}/*.so* #{TARGET_LIB_PATH}/"
  system cmd    
  
  puts cmd = "mv #{BUILD_INCLUDE_PATH}/*.h* #{TARGET_INCLUDE_PATH}/"
  system cmd     
  
  puts cmd = "mv #{BUILD_PC_PATH}/*.pc* #{TARGET_PC_PATH}/"
  system cmd     
end

